-- Criação do banco de dados
CREATE DATABASE safe_monitor;
GO

-- Utilização do banco de dados
USE safe_monitor;
GO

-- Criação da tabela 'empresa'
IF OBJECT_ID(N'dbo.empresa', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.empresa (
        IdEmpresa INT PRIMARY KEY IDENTITY(1,1),
        nome_empresa VARCHAR(255) NOT NULL,
        cnpj VARCHAR(45) NOT NULL,
        razao_social VARCHAR(255) NOT NULL,
        telefone_celular VARCHAR(15) NOT NULL,
        telefone_fixo VARCHAR(14) NULL,
        telefone2_celular VARCHAR(15) NULL,
        tipo_instituicao VARCHAR(30) NOT NULL,
        privada VARCHAR(1) NOT NULL,
        cep VARCHAR(9) NULL,
        cidade VARCHAR(80) NULL,
        estado VARCHAR(80) NULL,
        rua VARCHAR(150) NULL,
        numero INT NULL,
        complemento VARCHAR(45) NULL,
        bairro VARCHAR(45) NULL,
        CONSTRAINT chkTipoInstituicao CHECK(tipo_instituicao in ('escola', 'faculdade', 'universidade')),
        CONSTRAINT chkPrivada CHECK (privada in ('s', 'n'))
    );
END;

IF OBJECT_ID(N'dbo.usuario', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.usuario (
        idUsuario INT PRIMARY KEY IDENTITY(1,1),
        email VARCHAR(120) NOT NULL,
        senha VARCHAR(30) NOT NULL,
        nome VARCHAR(45) NULL,
        cargo VARCHAR(45) NULL,
        cadastrar TINYINT NOT NULL,
        leitura TINYINT NOT NULL,
        alterar TINYINT NOT NULL,
        deletar TINYINT NOT NULL,
        capturar TINYINT NOT NULL,
        fk_empresa INT NOT NULL,
        CONSTRAINT chk_cadastro CHECK (cadastrar IN (0, 1)), 
        CONSTRAINT chk_leitura CHECK (leitura IN (0, 1)), 
        CONSTRAINT chk_alterar CHECK (alterar IN (0, 1)), 
        CONSTRAINT chk_deletar CHECK (deletar IN (0, 1)), 
        CONSTRAINT chk_capturar CHECK (capturar IN (0, 1)), 
        CONSTRAINT const_fkEmpresa FOREIGN KEY (fk_empresa) REFERENCES dbo.empresa (IdEmpresa)
    );
END;

IF OBJECT_ID(N'dbo.sala_de_aula', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.sala_de_aula (
        idSala INT PRIMARY KEY IDENTITY(1,1),
        nome VARCHAR(45) NOT NULL,
        localizacao TEXT NOT NULL,
        fk_usuario INT NOT NULL,
        fk_empresa INT NOT NULL,
        CONSTRAINT const_fkUsuario FOREIGN KEY (fk_usuario) REFERENCES dbo.usuario(idUsuario),
        CONSTRAINT const_sala_fkEmpresa FOREIGN KEY (fk_empresa) REFERENCES dbo.empresa(IdEmpresa)
    );
END;

IF OBJECT_ID(N'dbo.maquina', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.maquina (
        idMaquina INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
        hostName VARCHAR(80) NOT NULL,
        nome VARCHAR(45) NULL,
        modelo VARCHAR(45) NULL,
        numero_serie VARCHAR(15) NULL,
        marca VARCHAR(30) NULL,
        sistema_operacional VARCHAR(15) NULL,
        arquitetura INT NULL,
        fabricante VARCHAR(50) NULL,
        stt_maquina VARCHAR(20) NULL,
        ligada CHAR(1) NULL,
        endereco_ipv4 VARCHAR(16) NULL,
        endereco_mac VARCHAR(18) NULL,
        fk_sala INT NOT NULL,
        fk_empresa INT NOT NULL,
        CONSTRAINT chkLigada CHECK (ligada IN ('S', 'N')),
        CONSTRAINT const_fkSala FOREIGN KEY (fk_sala) REFERENCES dbo.sala_de_aula (idSala) ON DELETE CASCADE,
        CONSTRAINT const_maquina_fkEmpresa FOREIGN KEY (fk_empresa) REFERENCES dbo.empresa (IdEmpresa) ON DELETE CASCADE
    );
END;



-- historico_usuarios
IF OBJECT_ID(N'dbo.historico_usuarios', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.historico_usuarios (
        idHistoricoUsuario INT NOT NULL,
        fk_usuario INT NOT NULL,
        fk_maquina INT NOT NULL,
		PRIMARY KEY (idHistoricoUsuario, fk_usuario, fk_maquina),
        data_hora DATETIME DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT fk_historicoUsuarios_usuario FOREIGN KEY (fk_usuario) REFERENCES dbo.usuario (idUsuario) ON DELETE CASCADE,
        CONSTRAINT fk_historicoUsuarios_maquina FOREIGN KEY (fk_maquina) REFERENCES dbo.maquina (idMaquina) ON DELETE CASCADE
    );
END;

-- janela
IF OBJECT_ID(N'dbo.janela', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.janela (
        idJanela INT NOT NULL,
        pid INT NULL,
        titulos TEXT NULL,
        comandos TEXT NULL,
        dt_hora DATETIME DEFAULT CURRENT_TIMESTAMP,
        stt VARCHAR(20),
        matar TINYINT NULL,
        fk_maquina INT NOT NULL,
		PRIMARY KEY (idJanela, fk_maquina),
        CONSTRAINT chk_stt CHECK (stt IN ('Fechada', 'Aberta')),
        CONSTRAINT fk_janela_maquina FOREIGN KEY (fk_maquina) REFERENCES dbo.maquina (idMaquina) ON DELETE CASCADE
    );
END;

-- tipo_componente
IF OBJECT_ID(N'dbo.tipo_componente', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.tipo_componente (
        idTipoComponente INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
        nome VARCHAR(45) NULL,
        descricao TEXT NULL
    );
END;

-- componente
IF OBJECT_ID(N'dbo.componente', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.componente (
        idComponente INT NOT NULL,
        nome VARCHAR(255) NULL,
        modelo VARCHAR(255) NULL,
        total DECIMAL(6,2) NULL,
        fk_maquina INT NOT NULL,
        fk_tipoComponente INT NOT NULL,
		PRIMARY KEY (idComponente, fk_maquina, fk_tipoComponente),
        CONSTRAINT fk_componente_maquina FOREIGN KEY (fk_maquina) REFERENCES dbo.maquina (idMaquina) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_componente_tipoComponente FOREIGN KEY (fk_tipoComponente) REFERENCES dbo.tipo_componente (idTipoComponente) ON DELETE CASCADE ON UPDATE CASCADE
    );
END;


-- tipo_dados
IF OBJECT_ID(N'dbo.tipo_dados', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.tipo_dados (
        idTipoDados INT NOT NULL,
        nome VARCHAR(45) NULL,
        fk_componente INT,
        fk_maquina INT,
        fk_tipoComponente INT,
		PRIMARY KEY (idTipoDados, fk_componente, fk_maquina, fk_tipoComponente),
        CONSTRAINT fk_tipo_dados_componente FOREIGN KEY (fk_componente, fk_maquina, fk_tipoComponente) 
		REFERENCES dbo.componente (idComponente, fk_maquina, fk_tipoComponente) ON DELETE CASCADE ON UPDATE CASCADE
    );
END;




-- tipo_notificacao
IF OBJECT_ID(N'dbo.tipo_notificacao', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.tipo_notificacao (
        idTipo_notificacao INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
        nome VARCHAR(45) NULL,
        cor VARCHAR(6) NULL
    );
END;

-- limites
IF OBJECT_ID(N'dbo.limites', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.limites (
        limite DECIMAL(6,2) NULL,
        fk_notificacao INT NOT NULL,
        fk_tipoComponente INT NOT NULL,
        PRIMARY KEY (fk_notificacao, fk_tipoComponente),
        CONSTRAINT fk_limites_fk_notificacao FOREIGN KEY (fk_notificacao) REFERENCES dbo.tipo_notificacao (idTipo_notificacao) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_limites_tipoComp FOREIGN KEY (fk_tipoComponente) REFERENCES dbo.tipo_componente (idTipoComponente) ON DELETE CASCADE ON UPDATE CASCADE
    );
END;

-- captura_dados
IF OBJECT_ID(N'dbo.captura_dados', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.captura_dados (
        idCaptura INT NOT NULL,
        valor_monitorado DECIMAL(5,2) NULL,
        dt_hora DATETIME NULL,
        fk_tipoDados INT NOT NULL,
        fk_componente INT NOT NULL,
        fk_maquina INT NOT NULL,
        fk_tipoComponente INT NOT NULL,
        PRIMARY KEY (idCaptura, fk_tipoDados, fk_componente, fk_maquina, fk_tipoComponente),
        CONSTRAINT fk_captura_tipo_dados FOREIGN KEY (fk_tipoDados, fk_componente, fk_maquina, fk_tipoComponente) REFERENCES dbo.tipo_dados (idTipoDados, fk_componente, fk_maquina, fk_tipoComponente) ON DELETE CASCADE ON UPDATE CASCADE
    );
END;


-- notificacao
IF OBJECT_ID(N'dbo.notificacao', N'U') IS NULL
BEGIN
    CREATE TABLE dbo.notificacao (
        data_hora DATETIME NULL,
        verificar CHAR(1) NULL,
        fk_idCaptura INT NOT NULL,
        fk_tipoDados INT NOT NULL,
        fk_componente INT NOT NULL,
        fk_maquina INT NOT NULL,
        fk_tipoComponente INT NOT NULL,
        fk_tipoNotificacao INT NOT NULL,
        PRIMARY KEY (fk_idCaptura, fk_tipoDados, fk_componente, fk_maquina, fk_tipoComponente, fk_tipoNotificacao),
        CONSTRAINT fk_notificacao_captura FOREIGN KEY (fk_idCaptura, fk_tipoDados, fk_componente, fk_maquina, fk_tipoComponente) REFERENCES dbo.captura_dados (idCaptura, fk_tipoDados, fk_componente, fk_maquina, fk_tipoComponente) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_notificacao_tipoNot FOREIGN KEY (fk_tipoNotificacao) REFERENCES dbo.tipo_notificacao (idTipo_notificacao) ON DELETE CASCADE ON UPDATE CASCADE
    );
END;


CREATE PROCEDURE procedure_salas @idEmpresaVar INT
AS
BEGIN 
    SELECT nome, idSala, localizacao FROM sala_de_aula WHERE fk_empresa = @idEmpresaVar;
END;

-- PROCEDURE EXIBIR MÁQUINAS
CREATE PROCEDURE procedure_maquina @idSalaVar INT
AS
BEGIN 
    SELECT * FROM maquina WHERE fk_sala = @idSalaVar;
END;

-- PROCEDURE EXIBIR MÁQUINAS LIGADAS E DESLIGADAS
CREATE PROCEDURE procedure_maquinas_lig_deslg @idSalaVar INT
AS
BEGIN 
    SELECT sala_de_aula.nome as nomeSala, 
        (SELECT COUNT(*) FROM maquina WHERE fk_sala = @idSalaVar) AS totalMaquina, 
        (SELECT COUNT(*) FROM maquina WHERE fk_sala = @idSalaVar AND ligada = 'S') AS maquinasLigadas,
        (SELECT COUNT(*) FROM maquina WHERE fk_sala = @idSalaVar AND ligada = 'N') AS maquinasDesligadas
    FROM sala_de_aula WHERE idSala = @idSalaVar;
END;

-- PROCEDURE ÚLTIMO VALOR DE CAPTURA
CREATE PROCEDURE ultimo_valor_captura @componenteVar INT, @tipoDados INT, @maquina INT
AS
BEGIN 
    SELECT c.nome as componente, td.nome as dadoCapturado, cd.dt_hora, cd.valor_monitorado as valor   
    FROM captura_dados cd
    JOIN tipo_componente c ON c.idTipoComponente = cd.fk_componente
    JOIN tipo_dados td ON td.idTipoDados = cd.fk_tipoDados
    WHERE cd.fk_tipoComponente = @componenteVar AND cd.fk_maquina = @maquina AND cd.fk_tipoDados = @tipoDados
    ORDER BY cd.dt_hora DESC 
    OFFSET 0 ROWS
    FETCH NEXT 1 ROWS ONLY;
END;


-- PROCEDURE GRÁFICOS ESPECÍFICOS
CREATE PROCEDURE graficos_especificos @componenteVar INT, @maquinaVar INT, @limitVar INT
AS
BEGIN 
    SELECT * FROM captura_dados 
    WHERE fk_maquina = @maquinaVar AND fk_tipoComponente = @componenteVar 
    ORDER BY dt_hora DESC
    OFFSET 0 ROWS
    FETCH NEXT @limitVar ROWS ONLY;
END;

-- PROCEDURE INFO COMPONENTE
CREATE PROCEDURE info_componente @componenteVar INT, @maquinaVar INT
AS
BEGIN 
    SELECT * FROM componente WHERE fk_maquina = @maquinaVar AND fk_tipoComponente = @componenteVar;
END;

-- PROCEDURE INFO NOTIFICAÇÃO
CREATE PROCEDURE info_notificacao @capturaVar INT
AS
BEGIN 
    SELECT m.nome AS maquina, s.nome AS salaDeAula, tpComp.nome AS tipoComponente
    FROM notificacao n
    JOIN maquina m ON m.idMaquina = n.fk_maquina
    JOIN sala_de_aula s ON s.idSala = m.fk_sala
    JOIN tipo_componente tpComp ON tpComp.idTipoComponente = n.fk_tipoNotificacao 
    WHERE fk_idCaptura = @capturaVar;
END;

-- PROCEDURE INFO LIMITES
CREATE PROCEDURE info_limites @idNotVar INT, @idTipoComVar INT
AS
BEGIN 
    SELECT limite FROM limites WHERE fk_notificacao = @idNotVar AND fk_tipoComponente = @idTipoComVar;
END;

-- PROCEDURE PROCEDURES NOT
CREATE PROCEDURE procedures_not
AS
BEGIN 
    SELECT m.nome as maquina, s.nome as sala, td.nome as dado, n.verificar as verificado
    FROM notificacao n
    JOIN maquina m ON m.idMaquina = n.fk_maquina
    JOIN tipo_dados td ON n.fk_tipoDados = td.idTipoDados
    JOIN sala_de_aula s ON m.fk_sala = s.idSala;
END;

-- INSERT TIPO COMPONENTE
INSERT INTO tipo_componente (nome) VALUES ('Processador'), ('Ram'), ('Disco');
INSERT INTO tipo_notificacao (nome, cor) VALUES ('Aviso', 'FF0000'), ('Urgente', 'ffd700');
INSERT INTO limites (fk_notificacao, fk_tipoComponente) VALUES (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2,3);
